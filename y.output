Grammar

    0 $accept: Program $end

    1 Program: tran_unit

    2 primary_exp: VAR
    3            | INTNUM
    4            | '(' exp ')'

    5 postfix_exp: primary_exp
    6            | postfix_exp '[' exp ']'
    7            | postfix_exp '(' ')'
    8            | postfix_exp '(' arg_exp_list ')'

    9 arg_exp_list: ass_exp
   10             | arg_exp_list ',' ass_exp

   11 unary_exp: postfix_exp
   12          | unary_oper unary_exp

   13 unary_oper: '+'
   14           | '-'
   15           | '!'

   16 mult_exp: unary_exp
   17         | mult_exp '*' unary_exp
   18         | mult_exp '%' unary_exp
   19         | mult_exp '/' unary_exp

   20 add_exp: mult_exp
   21        | add_exp '+' mult_exp
   22        | add_exp '-' mult_exp

   23 rel_exp: add_exp
   24        | rel_exp '<' add_exp
   25        | rel_exp '>' add_exp
   26        | rel_exp LE add_exp
   27        | rel_exp GE add_exp

   28 eq_exp: rel_exp
   29       | eq_exp EQ rel_exp
   30       | eq_exp NE rel_exp

   31 and_exp: eq_exp
   32        | and_exp AND eq_exp

   33 or_exp: and_exp
   34       | or_exp OR and_exp

   35 ass_exp: or_exp
   36        | unary_exp '=' ass_exp

   37 exp: ass_exp
   38    | exp ',' ass_exp

   39 typ: VOID
   40    | INT

   41 decl: typ init_del_list ';'
   42     | CONST typ init_del_list ';'

   43 init_del_list: init_del
   44              | init_del_list ',' init_del

   45 init_del: del
   46         | del '=' init

   47 del: VAR
   48    | '(' del ')'
   49    | del '[' ass_exp ']'
   50    | del '[' ']'
   51    | del '(' param_list ')'
   52    | del '(' idt_list ')'
   53    | del '(' ')'

   54 param_list: param_decl
   55           | param_list ',' param_decl

   56 param_decl: INT del

   57 idt_list: VAR
   58         | idt_list ',' VAR

   59 init: ass_exp
   60     | '{' init_list '}'

   61 init_list: init
   62          | init_list ',' init

   63 sta: more_sta
   64    | exp_sta
   65    | if_sta
   66    | iter_sta
   67    | jump_sta

   68 more_sta: '{' '}'
   69         | '{' block_item_list '}'

   70 block_item_list: block_item
   71                | block_item_list block_item

   72 block_item: decl
   73           | sta

   74 exp_sta: exp ';'

   75 if_sta: IF '(' exp ')' sta
   76       | IF '(' exp ')' sta ELSE sta

   77 iter_sta: WHILE '(' exp ')' sta

   78 jump_sta: RETURN ';'
   79         | RETURN exp ';'
   80         | CONTINUE ';'
   81         | BREAK ';'

   82 tran_unit: ext_decl
   83          | tran_unit ext_decl

   84 ext_decl: func_def
   85         | decl

   86 func_def: typ del decl_list more_sta
   87         | typ del more_sta

   88 decl_list: decl
   89          | decl_list decl


Terminals, with rules where they appear

    $end (0) 0
    '!' <gramtree> (33) 15
    '%' <gramtree> (37) 18
    '(' <gramtree> (40) 4 7 8 48 51 52 53 75 76 77
    ')' <gramtree> (41) 4 7 8 48 51 52 53 75 76 77
    '*' <gramtree> (42) 17
    '+' <gramtree> (43) 13 21
    ',' <gramtree> (44) 10 38 44 55 58 62
    '-' <gramtree> (45) 14 22
    '/' <gramtree> (47) 19
    ';' <gramtree> (59) 41 42 74 78 79 80 81
    '<' <gramtree> (60) 24
    '=' <gramtree> (61) 36 46
    '>' <gramtree> (62) 25
    '[' <gramtree> (91) 6 49 50
    ']' <gramtree> (93) 6 49 50
    '{' <gramtree> (123) 60 68 69
    '}' <gramtree> (125) 60 68 69
    error (256)
    CONST <gramtree> (258) 42
    INT <gramtree> (259) 40 56
    VOID <gramtree> (260) 39
    IF <gramtree> (261) 75 76
    WHILE <gramtree> (262) 77
    BREAK <gramtree> (263) 81
    CONTINUE <gramtree> (264) 80
    RETURN <gramtree> (265) 78 79
    ELSE <gramtree> (266) 76
    LE <gramtree> (267) 26
    GE <gramtree> (268) 27
    EQ <gramtree> (269) 29
    NE <gramtree> (270) 30
    OR <gramtree> (271) 34
    AND <gramtree> (272) 32
    INTNUM <gramtree> (273) 3
    VAR <gramtree> (274) 2 47 57 58
    LOWER_THAN_ELSE (275)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    Program (39)
        on left: 1
        on right: 0
    primary_exp <gramtree> (40)
        on left: 2 3 4
        on right: 5
    postfix_exp <gramtree> (41)
        on left: 5 6 7 8
        on right: 6 7 8 11
    arg_exp_list <gramtree> (42)
        on left: 9 10
        on right: 8 10
    unary_exp <gramtree> (43)
        on left: 11 12
        on right: 12 16 17 18 19 36
    unary_oper <gramtree> (44)
        on left: 13 14 15
        on right: 12
    mult_exp <gramtree> (45)
        on left: 16 17 18 19
        on right: 17 18 19 20 21 22
    add_exp <gramtree> (46)
        on left: 20 21 22
        on right: 21 22 23 24 25 26 27
    rel_exp <gramtree> (47)
        on left: 23 24 25 26 27
        on right: 24 25 26 27 28 29 30
    eq_exp <gramtree> (48)
        on left: 28 29 30
        on right: 29 30 31 32
    and_exp <gramtree> (49)
        on left: 31 32
        on right: 32 33 34
    or_exp <gramtree> (50)
        on left: 33 34
        on right: 34 35
    ass_exp <gramtree> (51)
        on left: 35 36
        on right: 9 10 36 37 38 49 59
    exp <gramtree> (52)
        on left: 37 38
        on right: 4 6 38 74 75 76 77 79
    typ <gramtree> (53)
        on left: 39 40
        on right: 41 42 86 87
    decl <gramtree> (54)
        on left: 41 42
        on right: 72 85 88 89
    init_del_list <gramtree> (55)
        on left: 43 44
        on right: 41 42 44
    init_del <gramtree> (56)
        on left: 45 46
        on right: 43 44
    del <gramtree> (57)
        on left: 47 48 49 50 51 52 53
        on right: 45 46 48 49 50 51 52 53 56 86 87
    param_list <gramtree> (58)
        on left: 54 55
        on right: 51 55
    param_decl <gramtree> (59)
        on left: 56
        on right: 54 55
    idt_list <gramtree> (60)
        on left: 57 58
        on right: 52 58
    init <gramtree> (61)
        on left: 59 60
        on right: 46 61 62
    init_list <gramtree> (62)
        on left: 61 62
        on right: 60 62
    sta <gramtree> (63)
        on left: 63 64 65 66 67
        on right: 73 75 76 77
    more_sta <gramtree> (64)
        on left: 68 69
        on right: 63 86 87
    block_item_list <gramtree> (65)
        on left: 70 71
        on right: 69 71
    block_item <gramtree> (66)
        on left: 72 73
        on right: 70 71
    exp_sta <gramtree> (67)
        on left: 74
        on right: 64
    if_sta <gramtree> (68)
        on left: 75 76
        on right: 65
    iter_sta <gramtree> (69)
        on left: 77
        on right: 66
    jump_sta <gramtree> (70)
        on left: 78 79 80 81
        on right: 67
    tran_unit <gramtree> (71)
        on left: 82 83
        on right: 1 83
    ext_decl <gramtree> (72)
        on left: 84 85
        on right: 82 83
    func_def <gramtree> (73)
        on left: 86 87
        on right: 84
    decl_list <gramtree> (74)
        on left: 88 89
        on right: 86 89


State 0

    0 $accept: • Program $end

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    Program    go to state 4
    typ        go to state 5
    decl       go to state 6
    tran_unit  go to state 7
    ext_decl   go to state 8
    func_def   go to state 9


State 1

   42 decl: CONST • typ init_del_list ';'

    INT   shift, and go to state 2
    VOID  shift, and go to state 3

    typ  go to state 10


State 2

   40 typ: INT •

    $default  reduce using rule 40 (typ)


State 3

   39 typ: VOID •

    $default  reduce using rule 39 (typ)


State 4

    0 $accept: Program • $end

    $end  shift, and go to state 11


State 5

   41 decl: typ • init_del_list ';'
   86 func_def: typ • del decl_list more_sta
   87         | typ • del more_sta

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    init_del_list  go to state 14
    init_del       go to state 15
    del            go to state 16


State 6

   85 ext_decl: decl •

    $default  reduce using rule 85 (ext_decl)


State 7

    1 Program: tran_unit •
   83 tran_unit: tran_unit • ext_decl

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 1 (Program)

    typ       go to state 5
    decl      go to state 6
    ext_decl  go to state 17
    func_def  go to state 9


State 8

   82 tran_unit: ext_decl •

    $default  reduce using rule 82 (tran_unit)


State 9

   84 ext_decl: func_def •

    $default  reduce using rule 84 (ext_decl)


State 10

   42 decl: CONST typ • init_del_list ';'

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    init_del_list  go to state 18
    init_del       go to state 15
    del            go to state 19


State 11

    0 $accept: Program $end •

    $default  accept


State 12

   48 del: '(' • del ')'

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    del  go to state 20


State 13

   47 del: VAR •

    $default  reduce using rule 47 (del)


State 14

   41 decl: typ init_del_list • ';'
   44 init_del_list: init_del_list • ',' init_del

    ','  shift, and go to state 21
    ';'  shift, and go to state 22


State 15

   43 init_del_list: init_del •

    $default  reduce using rule 43 (init_del_list)


State 16

   45 init_del: del •
   46         | del • '=' init
   49 del: del • '[' ass_exp ']'
   50    | del • '[' ']'
   51    | del • '(' param_list ')'
   52    | del • '(' idt_list ')'
   53    | del • '(' ')'
   86 func_def: typ del • decl_list more_sta
   87         | typ del • more_sta

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3
    '('    shift, and go to state 23
    '['    shift, and go to state 24
    '{'    shift, and go to state 25
    '='    shift, and go to state 26

    $default  reduce using rule 45 (init_del)

    typ        go to state 27
    decl       go to state 28
    more_sta   go to state 29
    decl_list  go to state 30


State 17

   83 tran_unit: tran_unit ext_decl •

    $default  reduce using rule 83 (tran_unit)


State 18

   42 decl: CONST typ init_del_list • ';'
   44 init_del_list: init_del_list • ',' init_del

    ','  shift, and go to state 21
    ';'  shift, and go to state 31


State 19

   45 init_del: del •
   46         | del • '=' init
   49 del: del • '[' ass_exp ']'
   50    | del • '[' ']'
   51    | del • '(' param_list ')'
   52    | del • '(' idt_list ')'
   53    | del • '(' ')'

    '('  shift, and go to state 23
    '['  shift, and go to state 24
    '='  shift, and go to state 26

    $default  reduce using rule 45 (init_del)


State 20

   48 del: '(' del • ')'
   49    | del • '[' ass_exp ']'
   50    | del • '[' ']'
   51    | del • '(' param_list ')'
   52    | del • '(' idt_list ')'
   53    | del • '(' ')'

    '('  shift, and go to state 23
    ')'  shift, and go to state 32
    '['  shift, and go to state 24


State 21

   44 init_del_list: init_del_list ',' • init_del

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    init_del  go to state 33
    del       go to state 19


State 22

   41 decl: typ init_del_list ';' •

    $default  reduce using rule 41 (decl)


State 23

   51 del: del '(' • param_list ')'
   52    | del '(' • idt_list ')'
   53    | del '(' • ')'

    INT  shift, and go to state 34
    ')'  shift, and go to state 35
    VAR  shift, and go to state 36

    param_list  go to state 37
    param_decl  go to state 38
    idt_list    go to state 39


State 24

   49 del: del '[' • ass_exp ']'
   50    | del '[' • ']'

    '('     shift, and go to state 40
    ']'     shift, and go to state 41
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 57


State 25

   68 more_sta: '{' • '}'
   69         | '{' • block_item_list '}'

    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    VOID      shift, and go to state 3
    IF        shift, and go to state 58
    WHILE     shift, and go to state 59
    BREAK     shift, and go to state 60
    CONTINUE  shift, and go to state 61
    RETURN    shift, and go to state 62
    '('       shift, and go to state 40
    '{'       shift, and go to state 25
    '}'       shift, and go to state 63
    '+'       shift, and go to state 42
    '-'       shift, and go to state 43
    '!'       shift, and go to state 44
    INTNUM    shift, and go to state 45
    VAR       shift, and go to state 46

    primary_exp      go to state 47
    postfix_exp      go to state 48
    unary_exp        go to state 49
    unary_oper       go to state 50
    mult_exp         go to state 51
    add_exp          go to state 52
    rel_exp          go to state 53
    eq_exp           go to state 54
    and_exp          go to state 55
    or_exp           go to state 56
    ass_exp          go to state 64
    exp              go to state 65
    typ              go to state 27
    decl             go to state 66
    sta              go to state 67
    more_sta         go to state 68
    block_item_list  go to state 69
    block_item       go to state 70
    exp_sta          go to state 71
    if_sta           go to state 72
    iter_sta         go to state 73
    jump_sta         go to state 74


State 26

   46 init_del: del '=' • init

    '('     shift, and go to state 40
    '{'     shift, and go to state 75
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 76
    init         go to state 77


State 27

   41 decl: typ • init_del_list ';'

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    init_del_list  go to state 14
    init_del       go to state 15
    del            go to state 19


State 28

   88 decl_list: decl •

    $default  reduce using rule 88 (decl_list)


State 29

   87 func_def: typ del more_sta •

    $default  reduce using rule 87 (func_def)


State 30

   86 func_def: typ del decl_list • more_sta
   89 decl_list: decl_list • decl

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3
    '{'    shift, and go to state 25

    typ       go to state 27
    decl      go to state 78
    more_sta  go to state 79


State 31

   42 decl: CONST typ init_del_list ';' •

    $default  reduce using rule 42 (decl)


State 32

   48 del: '(' del ')' •

    $default  reduce using rule 48 (del)


State 33

   44 init_del_list: init_del_list ',' init_del •

    $default  reduce using rule 44 (init_del_list)


State 34

   56 param_decl: INT • del

    '('  shift, and go to state 12
    VAR  shift, and go to state 13

    del  go to state 80


State 35

   53 del: del '(' ')' •

    $default  reduce using rule 53 (del)


State 36

   57 idt_list: VAR •

    $default  reduce using rule 57 (idt_list)


State 37

   51 del: del '(' param_list • ')'
   55 param_list: param_list • ',' param_decl

    ')'  shift, and go to state 81
    ','  shift, and go to state 82


State 38

   54 param_list: param_decl •

    $default  reduce using rule 54 (param_list)


State 39

   52 del: del '(' idt_list • ')'
   58 idt_list: idt_list • ',' VAR

    ')'  shift, and go to state 83
    ','  shift, and go to state 84


State 40

    4 primary_exp: '(' • exp ')'

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 85


State 41

   50 del: del '[' ']' •

    $default  reduce using rule 50 (del)


State 42

   13 unary_oper: '+' •

    $default  reduce using rule 13 (unary_oper)


State 43

   14 unary_oper: '-' •

    $default  reduce using rule 14 (unary_oper)


State 44

   15 unary_oper: '!' •

    $default  reduce using rule 15 (unary_oper)


State 45

    3 primary_exp: INTNUM •

    $default  reduce using rule 3 (primary_exp)


State 46

    2 primary_exp: VAR •

    $default  reduce using rule 2 (primary_exp)


State 47

    5 postfix_exp: primary_exp •

    $default  reduce using rule 5 (postfix_exp)


State 48

    6 postfix_exp: postfix_exp • '[' exp ']'
    7            | postfix_exp • '(' ')'
    8            | postfix_exp • '(' arg_exp_list ')'
   11 unary_exp: postfix_exp •

    '('  shift, and go to state 86
    '['  shift, and go to state 87

    $default  reduce using rule 11 (unary_exp)


State 49

   16 mult_exp: unary_exp •
   36 ass_exp: unary_exp • '=' ass_exp

    '='  shift, and go to state 88

    $default  reduce using rule 16 (mult_exp)


State 50

   12 unary_exp: unary_oper • unary_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 89
    unary_oper   go to state 50


State 51

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   20 add_exp: mult_exp •

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 20 (add_exp)


State 52

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   23 rel_exp: add_exp •

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 23 (rel_exp)


State 53

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   28 eq_exp: rel_exp •

    '<'  shift, and go to state 95
    '>'  shift, and go to state 96
    LE   shift, and go to state 97
    GE   shift, and go to state 98

    $default  reduce using rule 28 (eq_exp)


State 54

   29 eq_exp: eq_exp • EQ rel_exp
   30       | eq_exp • NE rel_exp
   31 and_exp: eq_exp •

    EQ  shift, and go to state 99
    NE  shift, and go to state 100

    $default  reduce using rule 31 (and_exp)


State 55

   32 and_exp: and_exp • AND eq_exp
   33 or_exp: and_exp •

    AND  shift, and go to state 101

    $default  reduce using rule 33 (or_exp)


State 56

   34 or_exp: or_exp • OR and_exp
   35 ass_exp: or_exp •

    OR  shift, and go to state 102

    $default  reduce using rule 35 (ass_exp)


State 57

   49 del: del '[' ass_exp • ']'

    ']'  shift, and go to state 103


State 58

   75 if_sta: IF • '(' exp ')' sta
   76       | IF • '(' exp ')' sta ELSE sta

    '('  shift, and go to state 104


State 59

   77 iter_sta: WHILE • '(' exp ')' sta

    '('  shift, and go to state 105


State 60

   81 jump_sta: BREAK • ';'

    ';'  shift, and go to state 106


State 61

   80 jump_sta: CONTINUE • ';'

    ';'  shift, and go to state 107


State 62

   78 jump_sta: RETURN • ';'
   79         | RETURN • exp ';'

    '('     shift, and go to state 40
    ';'     shift, and go to state 108
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 109


State 63

   68 more_sta: '{' '}' •

    $default  reduce using rule 68 (more_sta)


State 64

   37 exp: ass_exp •

    $default  reduce using rule 37 (exp)


State 65

   38 exp: exp • ',' ass_exp
   74 exp_sta: exp • ';'

    ','  shift, and go to state 110
    ';'  shift, and go to state 111


State 66

   72 block_item: decl •

    $default  reduce using rule 72 (block_item)


State 67

   73 block_item: sta •

    $default  reduce using rule 73 (block_item)


State 68

   63 sta: more_sta •

    $default  reduce using rule 63 (sta)


State 69

   69 more_sta: '{' block_item_list • '}'
   71 block_item_list: block_item_list • block_item

    CONST     shift, and go to state 1
    INT       shift, and go to state 2
    VOID      shift, and go to state 3
    IF        shift, and go to state 58
    WHILE     shift, and go to state 59
    BREAK     shift, and go to state 60
    CONTINUE  shift, and go to state 61
    RETURN    shift, and go to state 62
    '('       shift, and go to state 40
    '{'       shift, and go to state 25
    '}'       shift, and go to state 112
    '+'       shift, and go to state 42
    '-'       shift, and go to state 43
    '!'       shift, and go to state 44
    INTNUM    shift, and go to state 45
    VAR       shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 65
    typ          go to state 27
    decl         go to state 66
    sta          go to state 67
    more_sta     go to state 68
    block_item   go to state 113
    exp_sta      go to state 71
    if_sta       go to state 72
    iter_sta     go to state 73
    jump_sta     go to state 74


State 70

   70 block_item_list: block_item •

    $default  reduce using rule 70 (block_item_list)


State 71

   64 sta: exp_sta •

    $default  reduce using rule 64 (sta)


State 72

   65 sta: if_sta •

    $default  reduce using rule 65 (sta)


State 73

   66 sta: iter_sta •

    $default  reduce using rule 66 (sta)


State 74

   67 sta: jump_sta •

    $default  reduce using rule 67 (sta)


State 75

   60 init: '{' • init_list '}'

    '('     shift, and go to state 40
    '{'     shift, and go to state 75
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 76
    init         go to state 114
    init_list    go to state 115


State 76

   59 init: ass_exp •

    $default  reduce using rule 59 (init)


State 77

   46 init_del: del '=' init •

    $default  reduce using rule 46 (init_del)


State 78

   89 decl_list: decl_list decl •

    $default  reduce using rule 89 (decl_list)


State 79

   86 func_def: typ del decl_list more_sta •

    $default  reduce using rule 86 (func_def)


State 80

   49 del: del • '[' ass_exp ']'
   50    | del • '[' ']'
   51    | del • '(' param_list ')'
   52    | del • '(' idt_list ')'
   53    | del • '(' ')'
   56 param_decl: INT del •

    '('  shift, and go to state 23
    '['  shift, and go to state 24

    $default  reduce using rule 56 (param_decl)


State 81

   51 del: del '(' param_list ')' •

    $default  reduce using rule 51 (del)


State 82

   55 param_list: param_list ',' • param_decl

    INT  shift, and go to state 34

    param_decl  go to state 116


State 83

   52 del: del '(' idt_list ')' •

    $default  reduce using rule 52 (del)


State 84

   58 idt_list: idt_list ',' • VAR

    VAR  shift, and go to state 117


State 85

    4 primary_exp: '(' exp • ')'
   38 exp: exp • ',' ass_exp

    ')'  shift, and go to state 118
    ','  shift, and go to state 110


State 86

    7 postfix_exp: postfix_exp '(' • ')'
    8            | postfix_exp '(' • arg_exp_list ')'

    '('     shift, and go to state 40
    ')'     shift, and go to state 119
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp   go to state 47
    postfix_exp   go to state 48
    arg_exp_list  go to state 120
    unary_exp     go to state 49
    unary_oper    go to state 50
    mult_exp      go to state 51
    add_exp       go to state 52
    rel_exp       go to state 53
    eq_exp        go to state 54
    and_exp       go to state 55
    or_exp        go to state 56
    ass_exp       go to state 121


State 87

    6 postfix_exp: postfix_exp '[' • exp ']'

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 122


State 88

   36 ass_exp: unary_exp '=' • ass_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 123


State 89

   12 unary_exp: unary_oper unary_exp •

    $default  reduce using rule 12 (unary_exp)


State 90

   17 mult_exp: mult_exp '*' • unary_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 124
    unary_oper   go to state 50


State 91

   19 mult_exp: mult_exp '/' • unary_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 125
    unary_oper   go to state 50


State 92

   18 mult_exp: mult_exp '%' • unary_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 126
    unary_oper   go to state 50


State 93

   21 add_exp: add_exp '+' • mult_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 128


State 94

   22 add_exp: add_exp '-' • mult_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 129


State 95

   24 rel_exp: rel_exp '<' • add_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 130


State 96

   25 rel_exp: rel_exp '>' • add_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 131


State 97

   26 rel_exp: rel_exp LE • add_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 132


State 98

   27 rel_exp: rel_exp GE • add_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 133


State 99

   29 eq_exp: eq_exp EQ • rel_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 134


State 100

   30 eq_exp: eq_exp NE • rel_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 135


State 101

   32 and_exp: and_exp AND • eq_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 136


State 102

   34 or_exp: or_exp OR • and_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 127
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 137


State 103

   49 del: del '[' ass_exp ']' •

    $default  reduce using rule 49 (del)


State 104

   75 if_sta: IF '(' • exp ')' sta
   76       | IF '(' • exp ')' sta ELSE sta

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 138


State 105

   77 iter_sta: WHILE '(' • exp ')' sta

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 139


State 106

   81 jump_sta: BREAK ';' •

    $default  reduce using rule 81 (jump_sta)


State 107

   80 jump_sta: CONTINUE ';' •

    $default  reduce using rule 80 (jump_sta)


State 108

   78 jump_sta: RETURN ';' •

    $default  reduce using rule 78 (jump_sta)


State 109

   38 exp: exp • ',' ass_exp
   79 jump_sta: RETURN exp • ';'

    ','  shift, and go to state 110
    ';'  shift, and go to state 140


State 110

   38 exp: exp ',' • ass_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 141


State 111

   74 exp_sta: exp ';' •

    $default  reduce using rule 74 (exp_sta)


State 112

   69 more_sta: '{' block_item_list '}' •

    $default  reduce using rule 69 (more_sta)


State 113

   71 block_item_list: block_item_list block_item •

    $default  reduce using rule 71 (block_item_list)


State 114

   61 init_list: init •

    $default  reduce using rule 61 (init_list)


State 115

   60 init: '{' init_list • '}'
   62 init_list: init_list • ',' init

    '}'  shift, and go to state 142
    ','  shift, and go to state 143


State 116

   55 param_list: param_list ',' param_decl •

    $default  reduce using rule 55 (param_list)


State 117

   58 idt_list: idt_list ',' VAR •

    $default  reduce using rule 58 (idt_list)


State 118

    4 primary_exp: '(' exp ')' •

    $default  reduce using rule 4 (primary_exp)


State 119

    7 postfix_exp: postfix_exp '(' ')' •

    $default  reduce using rule 7 (postfix_exp)


State 120

    8 postfix_exp: postfix_exp '(' arg_exp_list • ')'
   10 arg_exp_list: arg_exp_list • ',' ass_exp

    ')'  shift, and go to state 144
    ','  shift, and go to state 145


State 121

    9 arg_exp_list: ass_exp •

    $default  reduce using rule 9 (arg_exp_list)


State 122

    6 postfix_exp: postfix_exp '[' exp • ']'
   38 exp: exp • ',' ass_exp

    ']'  shift, and go to state 146
    ','  shift, and go to state 110


State 123

   36 ass_exp: unary_exp '=' ass_exp •

    $default  reduce using rule 36 (ass_exp)


State 124

   17 mult_exp: mult_exp '*' unary_exp •

    $default  reduce using rule 17 (mult_exp)


State 125

   19 mult_exp: mult_exp '/' unary_exp •

    $default  reduce using rule 19 (mult_exp)


State 126

   18 mult_exp: mult_exp '%' unary_exp •

    $default  reduce using rule 18 (mult_exp)


State 127

   16 mult_exp: unary_exp •

    $default  reduce using rule 16 (mult_exp)


State 128

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   21 add_exp: add_exp '+' mult_exp •

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 21 (add_exp)


State 129

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   22 add_exp: add_exp '-' mult_exp •

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 22 (add_exp)


State 130

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   24 rel_exp: rel_exp '<' add_exp •

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 24 (rel_exp)


State 131

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   25 rel_exp: rel_exp '>' add_exp •

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 25 (rel_exp)


State 132

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   26 rel_exp: rel_exp LE add_exp •

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 26 (rel_exp)


State 133

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   27 rel_exp: rel_exp GE add_exp •

    '+'  shift, and go to state 93
    '-'  shift, and go to state 94

    $default  reduce using rule 27 (rel_exp)


State 134

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   29 eq_exp: eq_exp EQ rel_exp •

    '<'  shift, and go to state 95
    '>'  shift, and go to state 96
    LE   shift, and go to state 97
    GE   shift, and go to state 98

    $default  reduce using rule 29 (eq_exp)


State 135

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   30 eq_exp: eq_exp NE rel_exp •

    '<'  shift, and go to state 95
    '>'  shift, and go to state 96
    LE   shift, and go to state 97
    GE   shift, and go to state 98

    $default  reduce using rule 30 (eq_exp)


State 136

   29 eq_exp: eq_exp • EQ rel_exp
   30       | eq_exp • NE rel_exp
   32 and_exp: and_exp AND eq_exp •

    EQ  shift, and go to state 99
    NE  shift, and go to state 100

    $default  reduce using rule 32 (and_exp)


State 137

   32 and_exp: and_exp • AND eq_exp
   34 or_exp: or_exp OR and_exp •

    AND  shift, and go to state 101

    $default  reduce using rule 34 (or_exp)


State 138

   38 exp: exp • ',' ass_exp
   75 if_sta: IF '(' exp • ')' sta
   76       | IF '(' exp • ')' sta ELSE sta

    ')'  shift, and go to state 147
    ','  shift, and go to state 110


State 139

   38 exp: exp • ',' ass_exp
   77 iter_sta: WHILE '(' exp • ')' sta

    ')'  shift, and go to state 148
    ','  shift, and go to state 110


State 140

   79 jump_sta: RETURN exp ';' •

    $default  reduce using rule 79 (jump_sta)


State 141

   38 exp: exp ',' ass_exp •

    $default  reduce using rule 38 (exp)


State 142

   60 init: '{' init_list '}' •

    $default  reduce using rule 60 (init)


State 143

   62 init_list: init_list ',' • init

    '('     shift, and go to state 40
    '{'     shift, and go to state 75
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 76
    init         go to state 149


State 144

    8 postfix_exp: postfix_exp '(' arg_exp_list ')' •

    $default  reduce using rule 8 (postfix_exp)


State 145

   10 arg_exp_list: arg_exp_list ',' • ass_exp

    '('     shift, and go to state 40
    '+'     shift, and go to state 42
    '-'     shift, and go to state 43
    '!'     shift, and go to state 44
    INTNUM  shift, and go to state 45
    VAR     shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 150


State 146

    6 postfix_exp: postfix_exp '[' exp ']' •

    $default  reduce using rule 6 (postfix_exp)


State 147

   75 if_sta: IF '(' exp ')' • sta
   76       | IF '(' exp ')' • sta ELSE sta

    IF        shift, and go to state 58
    WHILE     shift, and go to state 59
    BREAK     shift, and go to state 60
    CONTINUE  shift, and go to state 61
    RETURN    shift, and go to state 62
    '('       shift, and go to state 40
    '{'       shift, and go to state 25
    '+'       shift, and go to state 42
    '-'       shift, and go to state 43
    '!'       shift, and go to state 44
    INTNUM    shift, and go to state 45
    VAR       shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 65
    sta          go to state 151
    more_sta     go to state 68
    exp_sta      go to state 71
    if_sta       go to state 72
    iter_sta     go to state 73
    jump_sta     go to state 74


State 148

   77 iter_sta: WHILE '(' exp ')' • sta

    IF        shift, and go to state 58
    WHILE     shift, and go to state 59
    BREAK     shift, and go to state 60
    CONTINUE  shift, and go to state 61
    RETURN    shift, and go to state 62
    '('       shift, and go to state 40
    '{'       shift, and go to state 25
    '+'       shift, and go to state 42
    '-'       shift, and go to state 43
    '!'       shift, and go to state 44
    INTNUM    shift, and go to state 45
    VAR       shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 65
    sta          go to state 152
    more_sta     go to state 68
    exp_sta      go to state 71
    if_sta       go to state 72
    iter_sta     go to state 73
    jump_sta     go to state 74


State 149

   62 init_list: init_list ',' init •

    $default  reduce using rule 62 (init_list)


State 150

   10 arg_exp_list: arg_exp_list ',' ass_exp •

    $default  reduce using rule 10 (arg_exp_list)


State 151

   75 if_sta: IF '(' exp ')' sta •
   76       | IF '(' exp ')' sta • ELSE sta

    ELSE  shift, and go to state 153

    $default  reduce using rule 75 (if_sta)


State 152

   77 iter_sta: WHILE '(' exp ')' sta •

    $default  reduce using rule 77 (iter_sta)


State 153

   76 if_sta: IF '(' exp ')' sta ELSE • sta

    IF        shift, and go to state 58
    WHILE     shift, and go to state 59
    BREAK     shift, and go to state 60
    CONTINUE  shift, and go to state 61
    RETURN    shift, and go to state 62
    '('       shift, and go to state 40
    '{'       shift, and go to state 25
    '+'       shift, and go to state 42
    '-'       shift, and go to state 43
    '!'       shift, and go to state 44
    INTNUM    shift, and go to state 45
    VAR       shift, and go to state 46

    primary_exp  go to state 47
    postfix_exp  go to state 48
    unary_exp    go to state 49
    unary_oper   go to state 50
    mult_exp     go to state 51
    add_exp      go to state 52
    rel_exp      go to state 53
    eq_exp       go to state 54
    and_exp      go to state 55
    or_exp       go to state 56
    ass_exp      go to state 64
    exp          go to state 65
    sta          go to state 154
    more_sta     go to state 68
    exp_sta      go to state 71
    if_sta       go to state 72
    iter_sta     go to state 73
    jump_sta     go to state 74


State 154

   76 if_sta: IF '(' exp ')' sta ELSE sta •

    $default  reduce using rule 76 (if_sta)
