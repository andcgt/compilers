Grammar

    0 $accept: Program $end

    1 Program: tran_unit

    2 LVal: VAR
    3     | LVal '[' add_exp ']'

    4 primary_exp: LVal
    5            | INTNUM
    6            | '(' add_exp ')'

    7 FuncRParams: add_exp
    8            | FuncRParams ',' add_exp

    9 unary_exp: primary_exp
   10          | VAR '(' FuncRParams ')'
   11          | VAR '(' ')'
   12          | unary_oper unary_exp

   13 unary_oper: '+'
   14           | '-'
   15           | '!'

   16 mult_exp: unary_exp
   17         | mult_exp '*' unary_exp
   18         | mult_exp '%' unary_exp
   19         | mult_exp '/' unary_exp

   20 add_exp: mult_exp
   21        | add_exp '+' mult_exp
   22        | add_exp '-' mult_exp

   23 rel_exp: add_exp
   24        | rel_exp '<' add_exp
   25        | rel_exp '>' add_exp
   26        | rel_exp LE add_exp
   27        | rel_exp GE add_exp

   28 eq_exp: rel_exp
   29       | eq_exp EQ rel_exp
   30       | eq_exp NE rel_exp

   31 and_exp: eq_exp
   32        | and_exp AND eq_exp

   33 or_exp: and_exp
   34       | or_exp OR and_exp

   35 decl: INT init_del_list ';'
   36     | CONST INT const_init_del_list ';'

   37 const_init_del_list: const_init_del
   38                    | const_init_del_list ',' const_init_del

   39 const_init_del: del '=' const_init

   40 init_del_list: init_del_list ',' init_del
   41              | init_del

   42 init_del: del
   43         | del '=' init

   44 del: VAR
   45    | del '[' const_exp ']'
   46    | del '[' ']'

   47 const_exp: add_exp

   48 FuncFParams: FuncFParam
   49            | FuncFParams ',' FuncFParam

   50 FuncFParam: INT del

   51 init: add_exp
   52     | '{' '}'
   53     | '{' init_list '}'

   54 const_init: add_exp
   55           | '{' '}'
   56           | '{' const_init_list '}'

   57 init_list: init
   58          | init_list ',' init

   59 const_init_list: const_init
   60                | const_init_list ',' const_init

   61 sta: Block
   62    | exp_sta
   63    | if_sta
   64    | iter_sta
   65    | jump_sta

   66 Block: '{' '}'
   67      | '{' block_item_list '}'

   68 block_item_list: block_item
   69                | block_item_list block_item

   70 block_item: decl
   71           | sta

   72 exp_sta: LVal '=' add_exp ';'
   73        | ';'
   74        | VAR '(' ')' ';'
   75        | VAR '(' FuncRParams ')' ';'

   76 if_sta: IF '(' or_exp ')' sta
   77       | IF '(' or_exp ')' sta ELSE sta

   78 iter_sta: WHILE '(' or_exp ')' sta

   79 jump_sta: RETURN ';'
   80         | RETURN add_exp ';'
   81         | CONTINUE ';'
   82         | BREAK ';'

   83 tran_unit: ext_decl
   84          | tran_unit ext_decl

   85 ext_decl: func_def
   86         | decl

   87 func_def: INT VAR '(' FuncFParams ')' Block
   88         | INT VAR '(' ')' Block
   89         | VOID VAR '(' FuncFParams ')' Block
   90         | VOID VAR '(' ')' Block


Terminals, with rules where they appear

    $end (0) 0
    '!' <gramtree> (33) 15
    '%' <gramtree> (37) 18
    '(' <gramtree> (40) 6 10 11 74 75 76 77 78 87 88 89 90
    ')' <gramtree> (41) 6 10 11 74 75 76 77 78 87 88 89 90
    '*' <gramtree> (42) 17
    '+' <gramtree> (43) 13 21
    ',' <gramtree> (44) 8 38 40 49 58 60
    '-' <gramtree> (45) 14 22
    '/' <gramtree> (47) 19
    ';' <gramtree> (59) 35 36 72 73 74 75 79 80 81 82
    '<' <gramtree> (60) 24
    '=' <gramtree> (61) 39 43 72
    '>' <gramtree> (62) 25
    '[' <gramtree> (91) 3 45 46
    ']' <gramtree> (93) 3 45 46
    '{' <gramtree> (123) 52 53 55 56 66 67
    '}' <gramtree> (125) 52 53 55 56 66 67
    error (256)
    CONST <gramtree> (258) 36
    INT <gramtree> (259) 35 36 50 87 88
    VOID <gramtree> (260) 89 90
    IF <gramtree> (261) 76 77
    WHILE <gramtree> (262) 78
    BREAK <gramtree> (263) 82
    CONTINUE <gramtree> (264) 81
    RETURN <gramtree> (265) 79 80
    ELSE <gramtree> (266) 77
    LE <gramtree> (267) 26
    GE <gramtree> (268) 27
    EQ <gramtree> (269) 29
    NE <gramtree> (270) 30
    OR <gramtree> (271) 34
    AND <gramtree> (272) 32
    INTNUM <gramtree> (273) 5
    VAR <gramtree> (274) 2 10 11 44 74 75 87 88 89 90
    LOWER_THAN_ELSE (275)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    Program (39)
        on left: 1
        on right: 0
    LVal <gramtree> (40)
        on left: 2 3
        on right: 3 4 72
    primary_exp <gramtree> (41)
        on left: 4 5 6
        on right: 9
    FuncRParams <gramtree> (42)
        on left: 7 8
        on right: 8 10 75
    unary_exp <gramtree> (43)
        on left: 9 10 11 12
        on right: 12 16 17 18 19
    unary_oper <gramtree> (44)
        on left: 13 14 15
        on right: 12
    mult_exp <gramtree> (45)
        on left: 16 17 18 19
        on right: 17 18 19 20 21 22
    add_exp <gramtree> (46)
        on left: 20 21 22
        on right: 3 6 7 8 21 22 23 24 25 26 27 47 51 54 72 80
    rel_exp <gramtree> (47)
        on left: 23 24 25 26 27
        on right: 24 25 26 27 28 29 30
    eq_exp <gramtree> (48)
        on left: 28 29 30
        on right: 29 30 31 32
    and_exp <gramtree> (49)
        on left: 31 32
        on right: 32 33 34
    or_exp <gramtree> (50)
        on left: 33 34
        on right: 34 76 77 78
    decl <gramtree> (51)
        on left: 35 36
        on right: 70 86
    const_init_del_list <gramtree> (52)
        on left: 37 38
        on right: 36 38
    const_init_del <gramtree> (53)
        on left: 39
        on right: 37 38
    init_del_list <gramtree> (54)
        on left: 40 41
        on right: 35 40
    init_del <gramtree> (55)
        on left: 42 43
        on right: 40 41
    del <gramtree> (56)
        on left: 44 45 46
        on right: 39 42 43 45 46 50
    const_exp <gramtree> (57)
        on left: 47
        on right: 45
    FuncFParams <gramtree> (58)
        on left: 48 49
        on right: 49 87 89
    FuncFParam <gramtree> (59)
        on left: 50
        on right: 48 49
    init <gramtree> (60)
        on left: 51 52 53
        on right: 43 57 58
    const_init <gramtree> (61)
        on left: 54 55 56
        on right: 39 59 60
    init_list <gramtree> (62)
        on left: 57 58
        on right: 53 58
    const_init_list <gramtree> (63)
        on left: 59 60
        on right: 56 60
    sta <gramtree> (64)
        on left: 61 62 63 64 65
        on right: 71 76 77 78
    Block <gramtree> (65)
        on left: 66 67
        on right: 61 87 88 89 90
    block_item_list <gramtree> (66)
        on left: 68 69
        on right: 67 69
    block_item <gramtree> (67)
        on left: 70 71
        on right: 68 69
    exp_sta <gramtree> (68)
        on left: 72 73 74 75
        on right: 62
    if_sta <gramtree> (69)
        on left: 76 77
        on right: 63
    iter_sta <gramtree> (70)
        on left: 78
        on right: 64
    jump_sta <gramtree> (71)
        on left: 79 80 81 82
        on right: 65
    tran_unit <gramtree> (72)
        on left: 83 84
        on right: 1 84
    ext_decl <gramtree> (73)
        on left: 85 86
        on right: 83 84
    func_def <gramtree> (74)
        on left: 87 88 89 90
        on right: 85


State 0

    0 $accept: • Program $end

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    Program    go to state 4
    decl       go to state 5
    tran_unit  go to state 6
    ext_decl   go to state 7
    func_def   go to state 8


State 1

   36 decl: CONST • INT const_init_del_list ';'

    INT  shift, and go to state 9


State 2

   35 decl: INT • init_del_list ';'
   87 func_def: INT • VAR '(' FuncFParams ')' Block
   88         | INT • VAR '(' ')' Block

    VAR  shift, and go to state 10

    init_del_list  go to state 11
    init_del       go to state 12
    del            go to state 13


State 3

   89 func_def: VOID • VAR '(' FuncFParams ')' Block
   90         | VOID • VAR '(' ')' Block

    VAR  shift, and go to state 14


State 4

    0 $accept: Program • $end

    $end  shift, and go to state 15


State 5

   86 ext_decl: decl •

    $default  reduce using rule 86 (ext_decl)


State 6

    1 Program: tran_unit •
   84 tran_unit: tran_unit • ext_decl

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 1 (Program)

    decl      go to state 5
    ext_decl  go to state 16
    func_def  go to state 8


State 7

   83 tran_unit: ext_decl •

    $default  reduce using rule 83 (tran_unit)


State 8

   85 ext_decl: func_def •

    $default  reduce using rule 85 (ext_decl)


State 9

   36 decl: CONST INT • const_init_del_list ';'

    VAR  shift, and go to state 17

    const_init_del_list  go to state 18
    const_init_del       go to state 19
    del                  go to state 20


State 10

   44 del: VAR •
   87 func_def: INT VAR • '(' FuncFParams ')' Block
   88         | INT VAR • '(' ')' Block

    '('  shift, and go to state 21

    $default  reduce using rule 44 (del)


State 11

   35 decl: INT init_del_list • ';'
   40 init_del_list: init_del_list • ',' init_del

    ','  shift, and go to state 22
    ';'  shift, and go to state 23


State 12

   41 init_del_list: init_del •

    $default  reduce using rule 41 (init_del_list)


State 13

   42 init_del: del •
   43         | del • '=' init
   45 del: del • '[' const_exp ']'
   46    | del • '[' ']'

    '['  shift, and go to state 24
    '='  shift, and go to state 25

    $default  reduce using rule 42 (init_del)


State 14

   89 func_def: VOID VAR • '(' FuncFParams ')' Block
   90         | VOID VAR • '(' ')' Block

    '('  shift, and go to state 26


State 15

    0 $accept: Program $end •

    $default  accept


State 16

   84 tran_unit: tran_unit ext_decl •

    $default  reduce using rule 84 (tran_unit)


State 17

   44 del: VAR •

    $default  reduce using rule 44 (del)


State 18

   36 decl: CONST INT const_init_del_list • ';'
   38 const_init_del_list: const_init_del_list • ',' const_init_del

    ','  shift, and go to state 27
    ';'  shift, and go to state 28


State 19

   37 const_init_del_list: const_init_del •

    $default  reduce using rule 37 (const_init_del_list)


State 20

   39 const_init_del: del • '=' const_init
   45 del: del • '[' const_exp ']'
   46    | del • '[' ']'

    '['  shift, and go to state 24
    '='  shift, and go to state 29


State 21

   87 func_def: INT VAR '(' • FuncFParams ')' Block
   88         | INT VAR '(' • ')' Block

    INT  shift, and go to state 30
    ')'  shift, and go to state 31

    FuncFParams  go to state 32
    FuncFParam   go to state 33


State 22

   40 init_del_list: init_del_list ',' • init_del

    VAR  shift, and go to state 17

    init_del  go to state 34
    del       go to state 13


State 23

   35 decl: INT init_del_list ';' •

    $default  reduce using rule 35 (decl)


State 24

   45 del: del '[' • const_exp ']'
   46    | del '[' • ']'

    '('     shift, and go to state 35
    ']'     shift, and go to state 36
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 47
    const_exp    go to state 48


State 25

   43 init_del: del '=' • init

    '('     shift, and go to state 35
    '{'     shift, and go to state 49
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 50
    init         go to state 51


State 26

   89 func_def: VOID VAR '(' • FuncFParams ')' Block
   90         | VOID VAR '(' • ')' Block

    INT  shift, and go to state 30
    ')'  shift, and go to state 52

    FuncFParams  go to state 53
    FuncFParam   go to state 33


State 27

   38 const_init_del_list: const_init_del_list ',' • const_init_del

    VAR  shift, and go to state 17

    const_init_del  go to state 54
    del             go to state 20


State 28

   36 decl: CONST INT const_init_del_list ';' •

    $default  reduce using rule 36 (decl)


State 29

   39 const_init_del: del '=' • const_init

    '('     shift, and go to state 35
    '{'     shift, and go to state 55
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 56
    const_init   go to state 57


State 30

   50 FuncFParam: INT • del

    VAR  shift, and go to state 17

    del  go to state 58


State 31

   88 func_def: INT VAR '(' ')' • Block

    '{'  shift, and go to state 59

    Block  go to state 60


State 32

   49 FuncFParams: FuncFParams • ',' FuncFParam
   87 func_def: INT VAR '(' FuncFParams • ')' Block

    ')'  shift, and go to state 61
    ','  shift, and go to state 62


State 33

   48 FuncFParams: FuncFParam •

    $default  reduce using rule 48 (FuncFParams)


State 34

   40 init_del_list: init_del_list ',' init_del •

    $default  reduce using rule 40 (init_del_list)


State 35

    6 primary_exp: '(' • add_exp ')'

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 63


State 36

   46 del: del '[' ']' •

    $default  reduce using rule 46 (del)


State 37

   13 unary_oper: '+' •

    $default  reduce using rule 13 (unary_oper)


State 38

   14 unary_oper: '-' •

    $default  reduce using rule 14 (unary_oper)


State 39

   15 unary_oper: '!' •

    $default  reduce using rule 15 (unary_oper)


State 40

    5 primary_exp: INTNUM •

    $default  reduce using rule 5 (primary_exp)


State 41

    2 LVal: VAR •
   10 unary_exp: VAR • '(' FuncRParams ')'
   11          | VAR • '(' ')'

    '('  shift, and go to state 64

    $default  reduce using rule 2 (LVal)


State 42

    3 LVal: LVal • '[' add_exp ']'
    4 primary_exp: LVal •

    '['  shift, and go to state 65

    $default  reduce using rule 4 (primary_exp)


State 43

    9 unary_exp: primary_exp •

    $default  reduce using rule 9 (unary_exp)


State 44

   16 mult_exp: unary_exp •

    $default  reduce using rule 16 (mult_exp)


State 45

   12 unary_exp: unary_oper • unary_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 66
    unary_oper   go to state 45


State 46

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   20 add_exp: mult_exp •

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 20 (add_exp)


State 47

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   47 const_exp: add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 47 (const_exp)


State 48

   45 del: del '[' const_exp • ']'

    ']'  shift, and go to state 72


State 49

   52 init: '{' • '}'
   53     | '{' • init_list '}'

    '('     shift, and go to state 35
    '{'     shift, and go to state 49
    '}'     shift, and go to state 73
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 50
    init         go to state 74
    init_list    go to state 75


State 50

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   51 init: add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 51 (init)


State 51

   43 init_del: del '=' init •

    $default  reduce using rule 43 (init_del)


State 52

   90 func_def: VOID VAR '(' ')' • Block

    '{'  shift, and go to state 59

    Block  go to state 76


State 53

   49 FuncFParams: FuncFParams • ',' FuncFParam
   89 func_def: VOID VAR '(' FuncFParams • ')' Block

    ')'  shift, and go to state 77
    ','  shift, and go to state 62


State 54

   38 const_init_del_list: const_init_del_list ',' const_init_del •

    $default  reduce using rule 38 (const_init_del_list)


State 55

   55 const_init: '{' • '}'
   56           | '{' • const_init_list '}'

    '('     shift, and go to state 35
    '{'     shift, and go to state 55
    '}'     shift, and go to state 78
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal             go to state 42
    primary_exp      go to state 43
    unary_exp        go to state 44
    unary_oper       go to state 45
    mult_exp         go to state 46
    add_exp          go to state 56
    const_init       go to state 79
    const_init_list  go to state 80


State 56

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   54 const_init: add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 54 (const_init)


State 57

   39 const_init_del: del '=' const_init •

    $default  reduce using rule 39 (const_init_del)


State 58

   45 del: del • '[' const_exp ']'
   46    | del • '[' ']'
   50 FuncFParam: INT del •

    '['  shift, and go to state 24

    $default  reduce using rule 50 (FuncFParam)


State 59

   66 Block: '{' • '}'
   67      | '{' • block_item_list '}'

    CONST     shift, and go to state 1
    INT       shift, and go to state 81
    IF        shift, and go to state 82
    WHILE     shift, and go to state 83
    BREAK     shift, and go to state 84
    CONTINUE  shift, and go to state 85
    RETURN    shift, and go to state 86
    '{'       shift, and go to state 59
    '}'       shift, and go to state 87
    ';'       shift, and go to state 88
    VAR       shift, and go to state 89

    LVal             go to state 90
    decl             go to state 91
    sta              go to state 92
    Block            go to state 93
    block_item_list  go to state 94
    block_item       go to state 95
    exp_sta          go to state 96
    if_sta           go to state 97
    iter_sta         go to state 98
    jump_sta         go to state 99


State 60

   88 func_def: INT VAR '(' ')' Block •

    $default  reduce using rule 88 (func_def)


State 61

   87 func_def: INT VAR '(' FuncFParams ')' • Block

    '{'  shift, and go to state 59

    Block  go to state 100


State 62

   49 FuncFParams: FuncFParams ',' • FuncFParam

    INT  shift, and go to state 30

    FuncFParam  go to state 101


State 63

    6 primary_exp: '(' add_exp • ')'
   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp

    ')'  shift, and go to state 102
    '+'  shift, and go to state 70
    '-'  shift, and go to state 71


State 64

   10 unary_exp: VAR '(' • FuncRParams ')'
   11          | VAR '(' • ')'

    '('     shift, and go to state 35
    ')'     shift, and go to state 103
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    FuncRParams  go to state 104
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 105


State 65

    3 LVal: LVal '[' • add_exp ']'

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 106


State 66

   12 unary_exp: unary_oper unary_exp •

    $default  reduce using rule 12 (unary_exp)


State 67

   17 mult_exp: mult_exp '*' • unary_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 107
    unary_oper   go to state 45


State 68

   19 mult_exp: mult_exp '/' • unary_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 108
    unary_oper   go to state 45


State 69

   18 mult_exp: mult_exp '%' • unary_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 109
    unary_oper   go to state 45


State 70

   21 add_exp: add_exp '+' • mult_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 110


State 71

   22 add_exp: add_exp '-' • mult_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 111


State 72

   45 del: del '[' const_exp ']' •

    $default  reduce using rule 45 (del)


State 73

   52 init: '{' '}' •

    $default  reduce using rule 52 (init)


State 74

   57 init_list: init •

    $default  reduce using rule 57 (init_list)


State 75

   53 init: '{' init_list • '}'
   58 init_list: init_list • ',' init

    '}'  shift, and go to state 112
    ','  shift, and go to state 113


State 76

   90 func_def: VOID VAR '(' ')' Block •

    $default  reduce using rule 90 (func_def)


State 77

   89 func_def: VOID VAR '(' FuncFParams ')' • Block

    '{'  shift, and go to state 59

    Block  go to state 114


State 78

   55 const_init: '{' '}' •

    $default  reduce using rule 55 (const_init)


State 79

   59 const_init_list: const_init •

    $default  reduce using rule 59 (const_init_list)


State 80

   56 const_init: '{' const_init_list • '}'
   60 const_init_list: const_init_list • ',' const_init

    '}'  shift, and go to state 115
    ','  shift, and go to state 116


State 81

   35 decl: INT • init_del_list ';'

    VAR  shift, and go to state 17

    init_del_list  go to state 11
    init_del       go to state 12
    del            go to state 13


State 82

   76 if_sta: IF • '(' or_exp ')' sta
   77       | IF • '(' or_exp ')' sta ELSE sta

    '('  shift, and go to state 117


State 83

   78 iter_sta: WHILE • '(' or_exp ')' sta

    '('  shift, and go to state 118


State 84

   82 jump_sta: BREAK • ';'

    ';'  shift, and go to state 119


State 85

   81 jump_sta: CONTINUE • ';'

    ';'  shift, and go to state 120


State 86

   79 jump_sta: RETURN • ';'
   80         | RETURN • add_exp ';'

    '('     shift, and go to state 35
    ';'     shift, and go to state 121
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 122


State 87

   66 Block: '{' '}' •

    $default  reduce using rule 66 (Block)


State 88

   73 exp_sta: ';' •

    $default  reduce using rule 73 (exp_sta)


State 89

    2 LVal: VAR •
   74 exp_sta: VAR • '(' ')' ';'
   75        | VAR • '(' FuncRParams ')' ';'

    '('  shift, and go to state 123

    $default  reduce using rule 2 (LVal)


State 90

    3 LVal: LVal • '[' add_exp ']'
   72 exp_sta: LVal • '=' add_exp ';'

    '['  shift, and go to state 65
    '='  shift, and go to state 124


State 91

   70 block_item: decl •

    $default  reduce using rule 70 (block_item)


State 92

   71 block_item: sta •

    $default  reduce using rule 71 (block_item)


State 93

   61 sta: Block •

    $default  reduce using rule 61 (sta)


State 94

   67 Block: '{' block_item_list • '}'
   69 block_item_list: block_item_list • block_item

    CONST     shift, and go to state 1
    INT       shift, and go to state 81
    IF        shift, and go to state 82
    WHILE     shift, and go to state 83
    BREAK     shift, and go to state 84
    CONTINUE  shift, and go to state 85
    RETURN    shift, and go to state 86
    '{'       shift, and go to state 59
    '}'       shift, and go to state 125
    ';'       shift, and go to state 88
    VAR       shift, and go to state 89

    LVal        go to state 90
    decl        go to state 91
    sta         go to state 92
    Block       go to state 93
    block_item  go to state 126
    exp_sta     go to state 96
    if_sta      go to state 97
    iter_sta    go to state 98
    jump_sta    go to state 99


State 95

   68 block_item_list: block_item •

    $default  reduce using rule 68 (block_item_list)


State 96

   62 sta: exp_sta •

    $default  reduce using rule 62 (sta)


State 97

   63 sta: if_sta •

    $default  reduce using rule 63 (sta)


State 98

   64 sta: iter_sta •

    $default  reduce using rule 64 (sta)


State 99

   65 sta: jump_sta •

    $default  reduce using rule 65 (sta)


State 100

   87 func_def: INT VAR '(' FuncFParams ')' Block •

    $default  reduce using rule 87 (func_def)


State 101

   49 FuncFParams: FuncFParams ',' FuncFParam •

    $default  reduce using rule 49 (FuncFParams)


State 102

    6 primary_exp: '(' add_exp ')' •

    $default  reduce using rule 6 (primary_exp)


State 103

   11 unary_exp: VAR '(' ')' •

    $default  reduce using rule 11 (unary_exp)


State 104

    8 FuncRParams: FuncRParams • ',' add_exp
   10 unary_exp: VAR '(' FuncRParams • ')'

    ')'  shift, and go to state 127
    ','  shift, and go to state 128


State 105

    7 FuncRParams: add_exp •
   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 7 (FuncRParams)


State 106

    3 LVal: LVal '[' add_exp • ']'
   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp

    ']'  shift, and go to state 129
    '+'  shift, and go to state 70
    '-'  shift, and go to state 71


State 107

   17 mult_exp: mult_exp '*' unary_exp •

    $default  reduce using rule 17 (mult_exp)


State 108

   19 mult_exp: mult_exp '/' unary_exp •

    $default  reduce using rule 19 (mult_exp)


State 109

   18 mult_exp: mult_exp '%' unary_exp •

    $default  reduce using rule 18 (mult_exp)


State 110

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   21 add_exp: add_exp '+' mult_exp •

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 21 (add_exp)


State 111

   17 mult_exp: mult_exp • '*' unary_exp
   18         | mult_exp • '%' unary_exp
   19         | mult_exp • '/' unary_exp
   22 add_exp: add_exp '-' mult_exp •

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68
    '%'  shift, and go to state 69

    $default  reduce using rule 22 (add_exp)


State 112

   53 init: '{' init_list '}' •

    $default  reduce using rule 53 (init)


State 113

   58 init_list: init_list ',' • init

    '('     shift, and go to state 35
    '{'     shift, and go to state 49
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 50
    init         go to state 130


State 114

   89 func_def: VOID VAR '(' FuncFParams ')' Block •

    $default  reduce using rule 89 (func_def)


State 115

   56 const_init: '{' const_init_list '}' •

    $default  reduce using rule 56 (const_init)


State 116

   60 const_init_list: const_init_list ',' • const_init

    '('     shift, and go to state 35
    '{'     shift, and go to state 55
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 56
    const_init   go to state 131


State 117

   76 if_sta: IF '(' • or_exp ')' sta
   77       | IF '(' • or_exp ')' sta ELSE sta

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 133
    eq_exp       go to state 134
    and_exp      go to state 135
    or_exp       go to state 136


State 118

   78 iter_sta: WHILE '(' • or_exp ')' sta

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 133
    eq_exp       go to state 134
    and_exp      go to state 135
    or_exp       go to state 137


State 119

   82 jump_sta: BREAK ';' •

    $default  reduce using rule 82 (jump_sta)


State 120

   81 jump_sta: CONTINUE ';' •

    $default  reduce using rule 81 (jump_sta)


State 121

   79 jump_sta: RETURN ';' •

    $default  reduce using rule 79 (jump_sta)


State 122

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   80 jump_sta: RETURN add_exp • ';'

    ';'  shift, and go to state 138
    '+'  shift, and go to state 70
    '-'  shift, and go to state 71


State 123

   74 exp_sta: VAR '(' • ')' ';'
   75        | VAR '(' • FuncRParams ')' ';'

    '('     shift, and go to state 35
    ')'     shift, and go to state 139
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    FuncRParams  go to state 140
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 105


State 124

   72 exp_sta: LVal '=' • add_exp ';'

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 141


State 125

   67 Block: '{' block_item_list '}' •

    $default  reduce using rule 67 (Block)


State 126

   69 block_item_list: block_item_list block_item •

    $default  reduce using rule 69 (block_item_list)


State 127

   10 unary_exp: VAR '(' FuncRParams ')' •

    $default  reduce using rule 10 (unary_exp)


State 128

    8 FuncRParams: FuncRParams ',' • add_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 142


State 129

    3 LVal: LVal '[' add_exp ']' •

    $default  reduce using rule 3 (LVal)


State 130

   58 init_list: init_list ',' init •

    $default  reduce using rule 58 (init_list)


State 131

   60 const_init_list: const_init_list ',' const_init •

    $default  reduce using rule 60 (const_init_list)


State 132

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   23 rel_exp: add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 23 (rel_exp)


State 133

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   28 eq_exp: rel_exp •

    '<'  shift, and go to state 143
    '>'  shift, and go to state 144
    LE   shift, and go to state 145
    GE   shift, and go to state 146

    $default  reduce using rule 28 (eq_exp)


State 134

   29 eq_exp: eq_exp • EQ rel_exp
   30       | eq_exp • NE rel_exp
   31 and_exp: eq_exp •

    EQ  shift, and go to state 147
    NE  shift, and go to state 148

    $default  reduce using rule 31 (and_exp)


State 135

   32 and_exp: and_exp • AND eq_exp
   33 or_exp: and_exp •

    AND  shift, and go to state 149

    $default  reduce using rule 33 (or_exp)


State 136

   34 or_exp: or_exp • OR and_exp
   76 if_sta: IF '(' or_exp • ')' sta
   77       | IF '(' or_exp • ')' sta ELSE sta

    ')'  shift, and go to state 150
    OR   shift, and go to state 151


State 137

   34 or_exp: or_exp • OR and_exp
   78 iter_sta: WHILE '(' or_exp • ')' sta

    ')'  shift, and go to state 152
    OR   shift, and go to state 151


State 138

   80 jump_sta: RETURN add_exp ';' •

    $default  reduce using rule 80 (jump_sta)


State 139

   74 exp_sta: VAR '(' ')' • ';'

    ';'  shift, and go to state 153


State 140

    8 FuncRParams: FuncRParams • ',' add_exp
   75 exp_sta: VAR '(' FuncRParams • ')' ';'

    ')'  shift, and go to state 154
    ','  shift, and go to state 128


State 141

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   72 exp_sta: LVal '=' add_exp • ';'

    ';'  shift, and go to state 155
    '+'  shift, and go to state 70
    '-'  shift, and go to state 71


State 142

    8 FuncRParams: FuncRParams ',' add_exp •
   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 8 (FuncRParams)


State 143

   24 rel_exp: rel_exp '<' • add_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 156


State 144

   25 rel_exp: rel_exp '>' • add_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 157


State 145

   26 rel_exp: rel_exp LE • add_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 158


State 146

   27 rel_exp: rel_exp GE • add_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 159


State 147

   29 eq_exp: eq_exp EQ • rel_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 160


State 148

   30 eq_exp: eq_exp NE • rel_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 161


State 149

   32 and_exp: and_exp AND • eq_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 133
    eq_exp       go to state 162


State 150

   76 if_sta: IF '(' or_exp ')' • sta
   77       | IF '(' or_exp ')' • sta ELSE sta

    IF        shift, and go to state 82
    WHILE     shift, and go to state 83
    BREAK     shift, and go to state 84
    CONTINUE  shift, and go to state 85
    RETURN    shift, and go to state 86
    '{'       shift, and go to state 59
    ';'       shift, and go to state 88
    VAR       shift, and go to state 89

    LVal      go to state 90
    sta       go to state 163
    Block     go to state 93
    exp_sta   go to state 96
    if_sta    go to state 97
    iter_sta  go to state 98
    jump_sta  go to state 99


State 151

   34 or_exp: or_exp OR • and_exp

    '('     shift, and go to state 35
    '+'     shift, and go to state 37
    '-'     shift, and go to state 38
    '!'     shift, and go to state 39
    INTNUM  shift, and go to state 40
    VAR     shift, and go to state 41

    LVal         go to state 42
    primary_exp  go to state 43
    unary_exp    go to state 44
    unary_oper   go to state 45
    mult_exp     go to state 46
    add_exp      go to state 132
    rel_exp      go to state 133
    eq_exp       go to state 134
    and_exp      go to state 164


State 152

   78 iter_sta: WHILE '(' or_exp ')' • sta

    IF        shift, and go to state 82
    WHILE     shift, and go to state 83
    BREAK     shift, and go to state 84
    CONTINUE  shift, and go to state 85
    RETURN    shift, and go to state 86
    '{'       shift, and go to state 59
    ';'       shift, and go to state 88
    VAR       shift, and go to state 89

    LVal      go to state 90
    sta       go to state 165
    Block     go to state 93
    exp_sta   go to state 96
    if_sta    go to state 97
    iter_sta  go to state 98
    jump_sta  go to state 99


State 153

   74 exp_sta: VAR '(' ')' ';' •

    $default  reduce using rule 74 (exp_sta)


State 154

   75 exp_sta: VAR '(' FuncRParams ')' • ';'

    ';'  shift, and go to state 166


State 155

   72 exp_sta: LVal '=' add_exp ';' •

    $default  reduce using rule 72 (exp_sta)


State 156

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   24 rel_exp: rel_exp '<' add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 24 (rel_exp)


State 157

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   25 rel_exp: rel_exp '>' add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 25 (rel_exp)


State 158

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   26 rel_exp: rel_exp LE add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 26 (rel_exp)


State 159

   21 add_exp: add_exp • '+' mult_exp
   22        | add_exp • '-' mult_exp
   27 rel_exp: rel_exp GE add_exp •

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 27 (rel_exp)


State 160

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   29 eq_exp: eq_exp EQ rel_exp •

    '<'  shift, and go to state 143
    '>'  shift, and go to state 144
    LE   shift, and go to state 145
    GE   shift, and go to state 146

    $default  reduce using rule 29 (eq_exp)


State 161

   24 rel_exp: rel_exp • '<' add_exp
   25        | rel_exp • '>' add_exp
   26        | rel_exp • LE add_exp
   27        | rel_exp • GE add_exp
   30 eq_exp: eq_exp NE rel_exp •

    '<'  shift, and go to state 143
    '>'  shift, and go to state 144
    LE   shift, and go to state 145
    GE   shift, and go to state 146

    $default  reduce using rule 30 (eq_exp)


State 162

   29 eq_exp: eq_exp • EQ rel_exp
   30       | eq_exp • NE rel_exp
   32 and_exp: and_exp AND eq_exp •

    EQ  shift, and go to state 147
    NE  shift, and go to state 148

    $default  reduce using rule 32 (and_exp)


State 163

   76 if_sta: IF '(' or_exp ')' sta •
   77       | IF '(' or_exp ')' sta • ELSE sta

    ELSE  shift, and go to state 167

    $default  reduce using rule 76 (if_sta)


State 164

   32 and_exp: and_exp • AND eq_exp
   34 or_exp: or_exp OR and_exp •

    AND  shift, and go to state 149

    $default  reduce using rule 34 (or_exp)


State 165

   78 iter_sta: WHILE '(' or_exp ')' sta •

    $default  reduce using rule 78 (iter_sta)


State 166

   75 exp_sta: VAR '(' FuncRParams ')' ';' •

    $default  reduce using rule 75 (exp_sta)


State 167

   77 if_sta: IF '(' or_exp ')' sta ELSE • sta

    IF        shift, and go to state 82
    WHILE     shift, and go to state 83
    BREAK     shift, and go to state 84
    CONTINUE  shift, and go to state 85
    RETURN    shift, and go to state 86
    '{'       shift, and go to state 59
    ';'       shift, and go to state 88
    VAR       shift, and go to state 89

    LVal      go to state 90
    sta       go to state 168
    Block     go to state 93
    exp_sta   go to state 96
    if_sta    go to state 97
    iter_sta  go to state 98
    jump_sta  go to state 99


State 168

   77 if_sta: IF '(' or_exp ')' sta ELSE sta •

    $default  reduce using rule 77 (if_sta)
